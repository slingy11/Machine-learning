# -*- coding: utf-8 -*-
"""Copy of Untitled0.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1oHtKuxSeirHo6XGNPV1WNC8AkAj7qZXF
"""

#importing modules

import pandas as pd
import numpy as np
import os
import matplotlib.pyplot as plt
import seaborn as sns

#loading the dataset

df = pd.read_csv('Iris (1).csv')
df.head()

# deleting an unnecessary column
df = df.drop(columns = ['Id'])
df.head()

# statistics about data
df.describe()

# checking for null values
df.isnull().sum()

#Analysing data through histogram
df['PetalLengthCm'].hist()

df['PetalWidthCm'].hist()

df['SepalLengthCm'].hist()

df['SepalWidthCm'].hist()

#plotting a scatterplot
colors = ['red', 'yellow', 'blue']
species = ['Iris-virginica','Iris-versicolor','Iris-setosa']

for i in range(3):
    x = df[df['Species'] == species[i]]
    plt.scatter(x['PetalLengthCm'], x['PetalWidthCm'], c = colors[i], label=species[i])
plt.xlabel("Petal Length")
plt.ylabel("Petal Width")
plt.legend()

for i in range(3):
    x = df[df['Species'] == species[i]]
    plt.scatter(x['SepalLengthCm'], x['SepalWidthCm'], c = colors[i], label=species[i])
plt.xlabel("Sepal Length")
plt.ylabel("Sepal Width")
plt.legend()

for i in range(3):
    x = df[df['Species'] == species[i]]
    plt.scatter(x['SepalLengthCm'], x['PetalLengthCm'], c = colors[i], label=species[i])
plt.xlabel("Sepal Length")
plt.ylabel("Petal Length")
plt.legend()

for i in range(3):
    x = df[df['Species'] == species[i]]
    plt.scatter(x['SepalWidthCm'], x['PetalWidthCm'], c = colors[i], label=species[i])
plt.xlabel("Sepal Width")
plt.ylabel("Petal Width")
plt.legend()

#Label encoding
from sklearn.preprocessing import LabelEncoder
le = LabelEncoder()

df['Species'] = le.fit_transform(df['Species'])
df.head()

#Model Training
from sklearn.model_selection import train_test_split
# train - 60
# test - 40
X = df.drop(columns=['Species'])
Y = df['Species']
x_train, x_test, y_train, y_test = train_test_split(X, Y, test_size=0.40)

#logistic regression 
from sklearn.linear_model import LogisticRegression
model = LogisticRegression()

#model training
model.fit(x_train, y_train)

#getting performance
print("Accuracy: ",model.score(x_test, y_test) * 100)

# knn : k-nearest neighbours
from sklearn.neighbors import KNeighborsClassifier
model = KNeighborsClassifier()

model.fit(x_train, y_train)

# getting performance
print("Accuracy: ",model.score(x_test, y_test) * 100)

